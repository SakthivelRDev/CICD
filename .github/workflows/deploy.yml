name: CI/CD - Build, Push, and Deploy

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set tag for the image
        id: meta
        run: echo "tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}
          BUILD_CONTEXT=./myapp/${{ matrix.service }}
          
          # Add --no-cache flag only for the frontend build to prevent stale cache
          NO_CACHE_FLAG=""
          if [ "${{ matrix.service }}" = "frontend" ]; then
            NO_CACHE_FLAG="--no-cache"
          fi

          docker build ${NO_CACHE_FLAG} -f ${BUILD_CONTEXT}/Dockerfile \
            -t ${IMAGE_NAME}:${{ steps.meta.outputs.tag }} \
            -t ${IMAGE_NAME}:latest ${BUILD_CONTEXT}
            
          docker push ${IMAGE_NAME} --all-tags

  deploy:
    # This job runs only after the build-and-push job is successful
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Force new ECS deployment
        run: |
          aws ecs update-service --cluster my-app-cluster --service frontend-service --force-new-deployment --no-cli-pager
          aws ecs update-service --cluster my-app-cluster --service backend-service --force-new-deployment --no-cli-pager